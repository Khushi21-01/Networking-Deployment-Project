name: Azure Deployment Pipeline

on: 
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_infrastructure:
        description: 'Deploy infrastructure (use only for initial setup or infrastructure changes)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_REGISTRY }}/webapp:${{ github.sha }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_VM_NAME: ${{ secrets.AZURE_VM_NAME }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Debug Docker image name
        run: |
          echo "Docker image will be: $DOCKER_IMAGE"
          echo "GitHub SHA: ${{ github.sha }}"
          
      - name: Build Docker image
        run: docker build -t $DOCKER_IMAGE --file ./sample-application/Dockerfile ./sample-application
        
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Push Docker image
        run: docker push $DOCKER_IMAGE

  deploy-infrastructure:
    needs: build
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_infrastructure == 'true') || 
      (github.event_name == 'push' && contains(github.event.head_commit.message, '[infra]'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false
          
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az extension add --name azure-devops
          
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Set Azure Subscription
        run: |
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          echo "Current account:"
          az account show
          
      - name: Setup SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AZURE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
      - name: Terraform Init
        run: |
          cd ./terraform
          terraform init -backend-config="storage_account_name=${{ secrets.TF_STORAGE_ACCOUNT }}" \
                         -backend-config="container_name=${{ secrets.TF_CONTAINER_NAME }}" \
                         -backend-config="key=terraform.tfstate"
                         
      - name: Terraform Plan
        run: |
          cd ./terraform
          terraform plan -var="resource_group_name=$AZURE_RESOURCE_GROUP" \
                        -var="location=${{ secrets.AZURE_LOCATION }}" \
                        -out=tfplan
                        
      - name: Terraform Apply
        run: |
          cd ./terraform
          terraform apply -auto-approve tfplan
          
      - name: Store Public IP
        run: |
          cd ./terraform
          IP=$(terraform output -raw public_ip)
          echo "PUBLIC_IP=$IP" >> $GITHUB_ENV
          echo "Deployed to IP: $IP"
          
      - name: Setup Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible sshpass
          
      - name: Run Ansible Playbook
        run: |
          ansible-playbook \
            -i "${PUBLIC_IP}," \
            -u azureuser \
            --private-key ~/.ssh/id_rsa \
            -e "docker_image=${DOCKER_IMAGE}" \
            ansible/docker.yml
        env:
          PUBLIC_IP: ${{ env.PUBLIC_IP }}
          ANSIBLE_HOST_KEY_CHECKING: "False"

  deploy-application:
    needs: build
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_infrastructure == 'false') || 
      (github.event_name == 'push' && !contains(github.event.head_commit.message, '[infra]'))
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Set Azure Subscription
        run: |
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: Setup SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AZURE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
      - name: Get Public IP
        run: |
          PUBLIC_IP=$(az vm show \
            --resource-group $AZURE_RESOURCE_GROUP \
            --name $AZURE_VM_NAME \
            --show-details \
            --query publicIps \
            --output tsv)
            
          if [ -z "$PUBLIC_IP" ]; then
            echo "ERROR: Could not retrieve public IP address"
            exit 1
          fi
          
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "Deploying to IP: $PUBLIC_IP"
          
      - name: Setup Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible sshpass
          
      - name: Run Ansible Playbook
        run: |
          ansible-playbook \
            -i "${PUBLIC_IP}," \
            -u azureuser \
            --private-key ~/.ssh/id_rsa \
            -e "docker_image=${DOCKER_IMAGE}" \
            ansible/docker.yml
        env:
          PUBLIC_IP: ${{ env.PUBLIC_IP }}
          ANSIBLE_HOST_KEY_CHECKING: "False"